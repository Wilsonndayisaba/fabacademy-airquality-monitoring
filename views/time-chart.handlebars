{{!-- Extend the main layout --}}
{{#> main}}
<div class="container mx-auto mt-10">
  <div class="flex justify-center">
    <div class="w-full max-w-md">
      <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="device">
          Select Device
        </label>
        <select id="device" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          {{#each devices}}
            <option value="{{this.id}}">{{this.name}}</option>
          {{/each}}
        </select>
      </div>
    </div>
  </div>

  <div id="chart-container" class="mt-10">
    <canvas id="myChart"></canvas>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
<script>
  let chartInstance = null;

  document.addEventListener('DOMContentLoaded', async () => {
    const deviceSelect = document.getElementById('device');
    const chartContainer = document.getElementById('chart-container');
    let ctx = document.getElementById('myChart').getContext('2d');

    if (deviceSelect.options.length > 0) {
      const deviceId = deviceSelect.options[0].value;
      deviceSelect.selectedIndex = 0; // Select the first device by default
      await fetchTimeChart(deviceId);
    }

    deviceSelect.addEventListener('change', async () => {
      const deviceId = deviceSelect.value;
      await fetchTimeChart(deviceId);
    });

    async function fetchTimeChart(deviceId) {
      try {
        console.log(`Fetching time chart data for device ID: ${deviceId}`);
        const response = await fetch(`/sensordata/${deviceId}/all`);
        const data = await response.json();
        console.log('Fetched data:', data);

        // Check if data is empty
        if (data && data.length > 0) {
          // Clear previous chart content
          if (chartInstance) {
            chartInstance.destroy();
          }

          // Process data for Chart.js
          const labels = data.map(d => new Date(d.createdAt));
          const no2 = data.map(d => d.NO2);
          const co2 = data.map(d => d.CO2);
          const nh3 = data.map(d => d.NH3);
          const humidity = data.map(d => d.humidity);
          const temperature = data.map(d => d.temperature);

          // Ensure datasets have data
          const datasets = [
            { label: 'NO2', data: no2, borderColor: '#8884d8', fill: false },
            { label: 'CO2', data: co2, borderColor: '#82ca9d', fill: false },
            { label: 'NH3', data: nh3, borderColor: '#ffc658', fill: false },
            { label: 'Humidity', data: humidity, borderColor: '#ff7300', fill: false },
            { label: 'Temperature', data: temperature, borderColor: '#387908', fill: false }
          ].filter(dataset => dataset.data.length > 0);

          if (datasets.length > 0) {
            // Reset chart container and canvas
            chartContainer.innerHTML = '<canvas id="myChart"></canvas>';
            ctx = document.getElementById('myChart').getContext('2d');

            // Create a new chart
            chartInstance = new Chart(ctx, {
              type: 'line',
              data: {
                labels: labels,
                datasets: datasets
              },
              options: {
                responsive: true,
                scales: {
                  x: {
                    type: 'time',
                    time: {
                      unit: 'minute'
                    },
                    title: {
                      display: true,
                      text: 'Time'
                    }
                  },
                  y: {
                    title: {
                      display: true,
                      text: 'Value'
                    }
                  }
                }
              }
            });
          } else {
            displayNoDataMessage('No data available for the selected device.');
          }
        } else {
          displayNoDataMessage('No data available for the selected device.');
        }
      } catch (error) {
        console.error('Error fetching data:', error);
        displayNoDataMessage('Error fetching data. Please try again later.');
      }
    }

    function displayNoDataMessage(message) {
      if (chartInstance) {
        chartInstance.destroy();
      }
      chartContainer.innerHTML = '<p>${message}</p>';
    }
  });
</script>
{{/main}}